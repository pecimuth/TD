#include "Grid.h"
#include <SFML/Graphics/Sprite.hpp>
#include <SFML/Graphics/RenderTarget.hpp>

static const int BLOCK_NOT_FOR_BUILDING = 93;

Grid::Grid():
	width(30),
	height(20),
	blocks(),
	path()
{
	blocks = {
		{119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119},
		{119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119},
		{119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119},
		{119,119,119,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,119,119},
		{119,119,119,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,119,119},
		{119,119,119,92,93,72,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,73,93,94,119,119},
		{119,119,119,92,93,94,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,92,93,94,119,119},
		{119,119,119,92,93,94,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,92,93,94,119,119},
		{119,119,119,92,93,94,119,119,69,70,70,70,70,70,70,71,119,119,119,119,119,119,119,119,119,92,93,94,119,119},
		{119,119,119,92,93,94,119,119,92,93,93,93,93,93,93,94,119,119,119,119,119,119,119,119,119,92,93,94,119,119},
		{119,119,119,92,93,94,119,119,92,93,72,116,116,73,93,94,119,119,69,70,70,70,70,70,70,96,93,94,119,119},
		{119,119,119,92,93,95,70,70,96,93,94,119,119,92,93,94,119,119,92,93,93,93,93,93,93,93,93,94,119,119},
		{119,119,119,92,93,93,93,93,93,93,94,119,119,92,93,94,119,119,92,93,72,116,116,116,116,116,116,117,119,119},
		{119,119,119,115,116,116,116,116,116,116,117,119,119,92,93,94,119,119,92,93,94,119,119,119,119,119,119,119,119,119},
		{119,119,119,119,119,119,119,119,119,119,119,119,119,92,93,94,119,119,92,93,94,119,119,119,119,119,119,119,119,119},
		{70,70,70,70,70,70,70,70,70,70,70,70,70,96,93,94,119,119,92,93,95,70,70,70,70,70,70,70,70,70},
		{93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,119,119,92,93,93,93,93,93,93,93,93,93,93,93},
		{116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,119,119,115,116,116,116,116,116,116,116,116,116,116,116},
		{119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119},
		{119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119}
	};
	path = Path{
		Sector{-1, 16},
		Sector{14, 16},
		Sector{14, 9},
		Sector{9, 9},
		Sector{9, 12},
		Sector{4, 12},
		Sector{4, 4},
		Sector{26, 4},
		Sector{26, 11},
		Sector{19, 11},
		Sector{19, 16},
		Sector{30, 16}
	};
}

bool Grid::isBuildingAllowedAt(const Sector& sector) const
{
	return sector.x >= 0 && sector.y >= 0 && sector.x < width && sector.y < height && isBuildingAllowedOn(blockAt(sector));
}

void Grid::draw(sf::RenderTarget& target, sf::RenderStates states) const
{
	sf::Sprite sprite;
	sprite.setTexture(*states.texture);
	for (int i = 0; i < height; ++i)
		for (int j = 0; j < width; ++j)
		{
			sprite.setPosition(static_cast<float>(Sector::SIZE * j), static_cast<float>(Sector::SIZE * i));
			const int block = blockAt(j, i);
			sprite.setTextureRect(textureRectById(block));
			target.draw(sprite, states);
		}
}

bool Grid::isBuildingAllowedOn(int block) const
{
	return block != BLOCK_NOT_FOR_BUILDING;
}
